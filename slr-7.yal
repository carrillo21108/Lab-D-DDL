(* Lexer para Gramática No. 4 *)

(* Introducir cualquier header aqui *)

let delim = [' ''\t''\n']
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let digits = digit+
let id = letter(letter|digit)*
let number = digits('.'digits)?(E['+''-']?digits)?
let cadenas = (digit|letter|ws)*

rule tokens = 
    ws		  { return "WHITESPACE" }
  | "if"         { print("IF") }
  | "for"        { print("FOR") }
  | id        { 
    with open('tokens.txt', 'a') as archivo:
      archivo.write("\nID")
  }               (* Cambie por una acción válida, que devuelva el token *)
  | number    
  { 
    with open('tokens.txt', 'a') as archivo:
      archivo.write("\nNUMBER")
  }
  | ';'       { return "SEMICOLON" }
  | ":="      { return "ASSIGNOP" }
  | '<'       { return "LT" }
  | '='       { return "EQ" }
  | '+'       
  { 
    with open('tokens.txt', 'a') as archivo:
      archivo.write("\nPLUS")
  }
  | '-'       
  { 
    with open('tokens.txt', 'a') as archivo:
      archivo.write("\nMINUS")
  }
  | '*'       
  { 
    with open('tokens.txt', 'a') as archivo:
      archivo.write("\nTIMES")
  }
  | '/'       { return "DIV" }
  | '('       { return "LPAREN" }
  | ')'       { return "RPAREN" }

(* Introducir cualquier trailer aqui *)